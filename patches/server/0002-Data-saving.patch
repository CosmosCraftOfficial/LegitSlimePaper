From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Legitimoose <legitimoose@gmail.com>
Date: Tue, 16 Jan 2024 14:15:13 -0800
Subject: [PATCH] Data saving

This patch makes .dat files save to a folder called "dat_files" in the worlds directory (the main server directory).
It also makes scoreboard data load from said .dat files when the server starts.

NOTE: Ideally we'd use an access transformer, but they seem to be broken in forks as of this patch.
# public net.minecraft.server.MinecraftServer readScoreboard(Lnet/minecraft/world/level/storage/DimensionDataStorage;)V

diff --git a/src/main/java/com/infernalsuite/aswm/SlimeNMSBridgeImpl.java b/src/main/java/com/infernalsuite/aswm/SlimeNMSBridgeImpl.java
index 87b6ee19fd165bde2db3a57545c58251dc6bad22..658f8d9a1f70a710d98bc7f7ea506188b5b21af4 100644
--- a/src/main/java/com/infernalsuite/aswm/SlimeNMSBridgeImpl.java
+++ b/src/main/java/com/infernalsuite/aswm/SlimeNMSBridgeImpl.java
@@ -100,6 +100,7 @@ public class SlimeNMSBridgeImpl implements SlimeNMSBridge {
         // Some stuff is needed when loading overworld world
         SlimeLevelInstance instance = ((SlimeInMemoryWorld) this.loadInstance(defaultWorld, Level.OVERWORLD)).getInstance();
         DimensionDataStorage worldpersistentdata = instance.getDataStorage();
+        instance.getServer().readScoreboard(worldpersistentdata); // Moose
         instance.getCraftServer().scoreboardManager = new org.bukkit.craftbukkit.scoreboard.CraftScoreboardManager(instance.getServer(), instance.getScoreboard());
         instance.getServer().commandStorage = new CommandStorage(worldpersistentdata);
 
@@ -256,4 +257,4 @@ public class SlimeNMSBridgeImpl implements SlimeNMSBridge {
         return data;
     }
 
-}
\ No newline at end of file
+}
diff --git a/src/main/java/com/infernalsuite/aswm/level/SlimeLevelInstance.java b/src/main/java/com/infernalsuite/aswm/level/SlimeLevelInstance.java
index 187336ecaa4262e3f081a88702031b17c6037091..c3fddd09c239f1560bcd9c4b3b4c65149160423e 100644
--- a/src/main/java/com/infernalsuite/aswm/level/SlimeLevelInstance.java
+++ b/src/main/java/com/infernalsuite/aswm/level/SlimeLevelInstance.java
@@ -53,16 +53,10 @@ public class SlimeLevelInstance extends ServerLevel {
     public static LevelStorageSource CUSTOM_LEVEL_STORAGE;
 
     static {
-        try {
-            Path path = Files.createTempDirectory("swm-" + UUID.randomUUID().toString().substring(0, 5)).toAbsolutePath();
-            DirectoryValidator directoryvalidator = LevelStorageSource.parseValidator(path.resolve("allowed_symlinks.txt"));
-            CUSTOM_LEVEL_STORAGE = new LevelStorageSource(path, path, directoryvalidator, DataFixers.getDataFixer());
-
-            FileUtils.forceDeleteOnExit(path.toFile());
-
-        } catch (IOException ex) {
-            throw new IllegalStateException("Couldn't create dummy file directory.", ex);
-        }
+        // Moose start
+        Path path = MinecraftServer.getServer().server.getWorldContainer().toPath();
+        CUSTOM_LEVEL_STORAGE = LevelStorageSource.createDefault(path);
+        // Moose end
     }
 
     private static final ExecutorService WORLD_SAVER_SERVICE = Executors.newFixedThreadPool(4, new ThreadFactoryBuilder()
@@ -77,8 +71,8 @@ public class SlimeLevelInstance extends ServerLevel {
                               org.bukkit.World.Environment environment) throws IOException {
 
         super(slimeBootstrap, MinecraftServer.getServer(), MinecraftServer.getServer().executor,
-                CUSTOM_LEVEL_STORAGE.createAccess(slimeBootstrap.initial().getName() + UUID.randomUUID(), dimensionKey),
-                primaryLevelData, worldKey, worldDimension,
+            CUSTOM_LEVEL_STORAGE.createAccess("dat_files", dimensionKey), // Moose
+            primaryLevelData, worldKey, worldDimension,
                 MinecraftServer.getServer().progressListenerFactory.create(11), false, null, 0,
                 Collections.emptyList(), true, environment, null, null);
         this.slimeInstance = new SlimeInMemoryWorld(slimeBootstrap, this);
@@ -117,6 +111,7 @@ public class SlimeLevelInstance extends ServerLevel {
                 Bukkit.getPluginManager().callEvent(new WorldSaveEvent(getWorld()));
 
                 //this.getChunkSource().save(forceSave);
+                this.getDataStorage().save(false); // Moose
                 this.serverLevelData.setWorldBorder(this.getWorldBorder().createSettings());
                 this.serverLevelData.setCustomBossEvents(MinecraftServer.getServer().getCustomBossEvents().save(MinecraftServer.getServer().registryAccess()));
 
@@ -205,4 +200,4 @@ public class SlimeLevelInstance extends ServerLevel {
     //        this.slimeInstance.unload(chunk);
     //        super.unload(chunk);
     //    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index ba81a045dc85900b96c6004d03cf9f145e7f3f0f..1a3ea4d6e10e743f5f44731867993738ed026461 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -498,7 +498,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         this.paperConfigurations = services.paperConfigurations(); // Paper - add paper configuration files
     }
 
-    private void readScoreboard(DimensionDataStorage persistentStateManager) {
+    public void readScoreboard(DimensionDataStorage persistentStateManager) { // Moose - Private -> Public. Hopefully access transformers will work in forks eventually.
         persistentStateManager.computeIfAbsent(this.getScoreboard().dataFactory(), "scoreboard");
     }
 
