From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Legitimoose <legitimoose@gmail.com>
Date: Tue, 16 Jan 2024 14:15:13 -0800
Subject: [PATCH] Data saving

This patch makes .dat files save to a folder called "dat_files" in the worlds directory (the main server directory).
It also makes scoreboard data load from said .dat files when the server starts.

NOTE: Ideally we'd use an access transformer, but they seem to be broken in forks as of this patch.
# public net.minecraft.server.MinecraftServer readScoreboard(Lnet/minecraft/world/level/storage/DimensionDataStorage;)V

diff --git a/src/main/java/com/infernalsuite/aswm/SlimeNMSBridgeImpl.java b/src/main/java/com/infernalsuite/aswm/SlimeNMSBridgeImpl.java
index 21c3ea3596a1f954618348afae2b2f7f058393d1..177df04518eac8dfe6b17fc17089b2398b2f5d67 100644
--- a/src/main/java/com/infernalsuite/aswm/SlimeNMSBridgeImpl.java
+++ b/src/main/java/com/infernalsuite/aswm/SlimeNMSBridgeImpl.java
@@ -86,6 +86,7 @@ public class SlimeNMSBridgeImpl implements SlimeNMSBridge {
         // Some stuff is needed when loading overworld world
         SlimeLevelInstance instance = ((SlimeInMemoryWorld) this.loadInstance(defaultWorld, Level.OVERWORLD)).getInstance();
         DimensionDataStorage worldpersistentdata = instance.getDataStorage();
+        instance.getServer().readScoreboard(worldpersistentdata);
         instance.getCraftServer().scoreboardManager = new org.bukkit.craftbukkit.scoreboard.CraftScoreboardManager(instance.getServer(), instance.getScoreboard());
         instance.getServer().commandStorage = new CommandStorage(worldpersistentdata);
 
@@ -236,4 +237,4 @@ public class SlimeNMSBridgeImpl implements SlimeNMSBridge {
         return data;
     }
 
-}
\ No newline at end of file
+}
diff --git a/src/main/java/com/infernalsuite/aswm/level/SlimeLevelInstance.java b/src/main/java/com/infernalsuite/aswm/level/SlimeLevelInstance.java
index 65b475b1292e01c918c1f8144599b5fa78688e97..51f4a4b45e1e6cb4557f7c041e0483a083e259ab 100644
--- a/src/main/java/com/infernalsuite/aswm/level/SlimeLevelInstance.java
+++ b/src/main/java/com/infernalsuite/aswm/level/SlimeLevelInstance.java
@@ -59,16 +59,10 @@ public class SlimeLevelInstance extends ServerLevel {
     public static LevelStorageSource CUSTOM_LEVEL_STORAGE;
 
     static {
-        try {
-            Path path = Files.createTempDirectory("swm-" + UUID.randomUUID().toString().substring(0, 5)).toAbsolutePath();
-            DirectoryValidator directoryvalidator = LevelStorageSource.parseValidator(path.resolve("allowed_symlinks.txt"));
-            CUSTOM_LEVEL_STORAGE = new LevelStorageSource(path, path, directoryvalidator, DataFixers.getDataFixer());
-
-            FileUtils.forceDeleteOnExit(path.toFile());
-
-        } catch (IOException ex) {
-            throw new IllegalStateException("Couldn't create dummy file directory.", ex);
-        }
+        // Moose start
+        Path path = MinecraftServer.getServer().server.getWorldContainer().toPath();
+        CUSTOM_LEVEL_STORAGE = LevelStorageSource.createDefault(path);
+        // Moose end
     }
 
     private static final ExecutorService WORLD_SAVER_SERVICE = Executors.newFixedThreadPool(4, new ThreadFactoryBuilder()
@@ -85,8 +79,8 @@ public class SlimeLevelInstance extends ServerLevel {
                               org.bukkit.World.Environment environment) throws IOException {
 
         super(slimeBootstrap, MinecraftServer.getServer(), MinecraftServer.getServer().executor,
-                CUSTOM_LEVEL_STORAGE.createAccess(slimeBootstrap.initial().getName() + UUID.randomUUID(), dimensionKey),
-                primaryLevelData, worldKey, worldDimension,
+            CUSTOM_LEVEL_STORAGE.createAccess("dat_files", dimensionKey), // Moose
+            primaryLevelData, worldKey, worldDimension,
                 MinecraftServer.getServer().progressListenerFactory.create(11), false, null, 0,
                 Collections.emptyList(), true, environment, null, null);
         this.slimeInstance = new SlimeInMemoryWorld(slimeBootstrap, this);
@@ -118,6 +112,7 @@ public class SlimeLevelInstance extends ServerLevel {
                 Bukkit.getPluginManager().callEvent(new WorldSaveEvent(getWorld()));
 
                 //this.getChunkSource().save(forceSave);
+                this.getDataStorage().save(); // Moose
                 this.serverLevelData.setWorldBorder(this.getWorldBorder().createSettings());
                 this.serverLevelData.setCustomBossEvents(MinecraftServer.getServer().getCustomBossEvents().save());
 
@@ -194,4 +189,4 @@ public class SlimeLevelInstance extends ServerLevel {
     //        this.slimeInstance.unload(chunk);
     //        super.unload(chunk);
     //    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 33ba5fafba15d5775880666e41d9e9ed187a2dfa..c87187d70695f71db4994ce3c78104510ab69bd4 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -407,7 +407,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         this.paperConfigurations = services.paperConfigurations(); // Paper
     }
 
-    private void readScoreboard(DimensionDataStorage persistentStateManager) {
+    public void readScoreboard(DimensionDataStorage persistentStateManager) { // Moose - Private -> Public. Hopefully access transformers will work in forks eventually.
         persistentStateManager.computeIfAbsent(this.getScoreboard().dataFactory(), "scoreboard");
     }
 
